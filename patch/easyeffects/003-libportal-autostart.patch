From a2f468cbcc8d1f6475c6a52add5688a95455ac0d Mon Sep 17 00:00:00 2001
From: Vincent Chernin <38842733+vchernin@users.noreply.github.com>
Date: Mon, 27 Dec 2021 23:53:53 -0800
Subject: [PATCH] Portal for autostart and background

Both the enable autostart and shutdown on window close buttons mostly correctly use the portal.
Based on the original patch from Digitalone1
To improve:
	A way to not overly ask in case someone resets EasyEffects' permissions. Right now if you reset permissions, then *enable* something like shutdown on window close it will still ask for the portal.
	Figure out weird bug where despite the portal access being previously given, EasyEffects gets killed by xdg-desktop-portal. In other words, it's in a state where it should have background permission but somehow doesn't.
---
 data/schemas/com.github.wwmm.easyeffects.gschema.xml |  7 +++++--
 include/preferences_general.hpp                      |  2 +-
 src/meson.build                                      |  1 +
 src/preferences_general.cpp                          | 86 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-------
 4 files changed, 86 insertions(+), 10 deletions(-)

diff --git a/data/schemas/com.github.wwmm.easyeffects.gschema.xml b/data/schemas/com.github.wwmm.easyeffects.gschema.xml
index 204d7f7..c710d55 100644
--- a/data/schemas/com.github.wwmm.easyeffects.gschema.xml
+++ b/data/schemas/com.github.wwmm.easyeffects.gschema.xml
@@ -7,6 +7,9 @@
         <key name="process-all-inputs" type="b">
             <default>false</default>
         </key>
+        <key name="enable-autostart" type="b">
+            <default>false</default>
+        </key>
         <key name="use-dark-theme" type="b">
             <default>false</default>
         </key>
@@ -32,13 +35,13 @@
             <default>false</default>
         </key>
         <key name="shutdown-on-window-close" type="b">
-            <default>false</default>
+            <default>true</default>
         </key>
         <key name="use-cubic-volumes" type="b">
             <default>false</default>
         </key>
         <key name="autohide-popovers" type="b">
             <default>true</default>
         </key>
     </schema>
-</schemalist>
\ No newline at end of file
+</schemalist>
diff --git a/include/preferences_general.hpp b/include/preferences_general.hpp
index 76c260a..76c255d 100644
--- a/include/preferences_general.hpp
+++ b/include/preferences_general.hpp
@@ -20,11 +20,11 @@
 #pragma once
 
 #include <adwaita.h>
-#include <filesystem>
 #include <fstream>
 #include <string>
 #include "ui_helpers.hpp"
 #include "util.hpp"
+#include "libportal/background.h"
 
 namespace ui::preferences::general {
 
diff --git a/src/meson.build b/src/meson.build
index 7dfe686..6d58b6e 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -132,6 +132,7 @@ easyeffects_deps = [
 	dependency('libebur128',version: '>=1.2.0'),
 	dependency('rnnoise'),
 	dependency('samplerate'),
+	dependency('libportal'),
 	dependency('rubberband'),
 	dependency('speexdsp'),
 	dependency('nlohmann_json'),
diff --git a/src/preferences_general.cpp b/src/preferences_general.cpp
index d8acd5d..f4eb14a 100644
--- a/src/preferences_general.cpp
+++ b/src/preferences_general.cpp
@@ -36,6 +36,67 @@ struct _PreferencesGeneral {
 
 G_DEFINE_TYPE(PreferencesGeneral, preferences_general, ADW_TYPE_PREFERENCES_PAGE)
 
+inline static XdpPortal* portal = nullptr;
+static void update_background_portal(const bool& state);
+static void on_request_background_called(GObject* source, GAsyncResult* result, gpointer data);
+
+
+void update_background_portal(const bool& state) {
+  XdpBackgroundFlags background_flags = XDP_BACKGROUND_FLAG_NONE;
+
+  g_autoptr(GPtrArray) command_line = nullptr;
+
+  if (state) {
+    command_line = g_ptr_array_new_with_free_func(g_free);
+
+    g_ptr_array_add(command_line, g_strdup("easyeffects"));
+    g_ptr_array_add(command_line, g_strdup("--gapplication-service"));
+
+    background_flags = XDP_BACKGROUND_FLAG_AUTOSTART;
+  }
+
+  auto* reason = g_strdup("EasyEffects Autostart");
+
+  xdp_portal_request_background(portal, nullptr, reason, command_line, background_flags, NULL,
+                                on_request_background_called, nullptr);
+
+  g_free(reason);
+}
+
+void on_request_background_called(GObject* source, GAsyncResult* result, gpointer data) {
+  g_autoptr(GError) error = nullptr;
+
+  if (!xdp_portal_request_background_finish(portal, result, &error)) {
+    util::warning(std::string("portal: a background request failed:") + ((error) ? error->message : "unknown reason"));
+
+    return;
+  }
+
+  util::debug("portal: a background request successfully completed");
+
+}
+
+
+auto on_enable_autostart(GtkSwitch* obj, gboolean state, gpointer user_data) -> gboolean {
+    update_background_portal(state);
+    return 0;
+}
+
+void on_background(GtkSwitch* btn, gboolean state, PreferencesGeneral* self) {
+    if (g_settings_get_boolean(self->settings, "enable-autostart")) {
+        util::debug("portal: requesting both background access and autostart file since autostart is enabled");
+        update_background_portal(true);
+    }
+    else {
+        util::debug("portal: requesting only background access, not creating autostart file");
+        update_background_portal(false);
+    }
+    return;
+
+}
+
+
+/*
 auto on_enable_autostart(GtkSwitch* obj, gboolean state, gpointer user_data) -> gboolean {
   std::filesystem::path autostart_dir{g_get_user_config_dir() + "/autostart"s};
 
@@ -72,6 +133,7 @@ auto on_enable_autostart(GtkSwitch* obj, gboolean state, gpointer user_data) -> 
 
   return 0;
 }
+*/
 
 void dispose(GObject* object) {
   auto* self = EE_PREFERENCES_GENERAL(object);
@@ -100,27 +162,37 @@ void preferences_general_class_init(PreferencesGeneralClass* klass) {
   gtk_widget_class_bind_template_child(widget_class, PreferencesGeneral, use_cubic_volumes);
 
   gtk_widget_class_bind_template_callback(widget_class, on_enable_autostart);
+  gtk_widget_class_bind_template_callback(widget_class, on_background);
 }
 
 void preferences_general_init(PreferencesGeneral* self) {
   gtk_widget_init_template(GTK_WIDGET(self));
 
   self->settings = g_settings_new("com.github.wwmm.easyeffects");
 
-  // initializing some widgets
+  if (portal == nullptr) {
+     portal = xdp_portal_new();
+  }
+    
 
-  gtk_switch_set_active(self->enable_autostart,
-                        static_cast<gboolean>(std::filesystem::is_regular_file(
-                            g_get_user_config_dir() + "/autostart/easyeffects-service.desktop"s)));
 
   gsettings_bind_widgets<"process-all-inputs", "process-all-outputs", "use-dark-theme", "shutdown-on-window-close",
-                         "use-cubic-volumes", "autohide-popovers">(
+                         "use-cubic-volumes", "autohide-popovers", "enable-autostart">(
       self->settings, self->process_all_inputs, self->process_all_outputs, self->theme_switch,
-      self->shutdown_on_window_close, self->use_cubic_volumes, self->autohide_popovers);
+      self->shutdown_on_window_close, self->use_cubic_volumes, self->autohide_popovers, self->enable_autostart);
+      
+
+  g_signal_connect(self->shutdown_on_window_close, "state-set", G_CALLBACK(on_background), self);
+
+
 }
 
+
+
 auto create() -> PreferencesGeneral* {
   return static_cast<PreferencesGeneral*>(g_object_new(EE_TYPE_PREFERENCES_GENERAL, nullptr));
 }
 
-}  // namespace ui::preferences::general
\ No newline at end of file
+
+
+}  // namespace ui::preferences::general
--
libgit2 1.0.1

